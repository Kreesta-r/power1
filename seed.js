const { sequelize, Slide } = require('./models');

const slidesData = [
  {
    id: 1,
    title: "Project Overview",
    content: `# PowerPoint Clone Web Application

## Full-Stack Presentation Platform

**Built with Modern Technology Stack**

‚Ä¢ Next.js 14 with React 18
‚Ä¢ TypeScript for type safety
‚Ä¢ Tailwind CSS for styling
‚Ä¢ Sequelize ORM with SQLite
‚Ä¢ Vercel frontend deployment
‚Ä¢ Railway backend deployment

*Stripped-down PowerPoint with Markdown support*`,
    order: 1
  },
  {
    id: 2,
    title: "Architecture Overview",
    content: `# System Architecture

## Separated Frontend and Backend

**Frontend Layer**
‚Ä¢ Next.js React application
‚Ä¢ Deployed on Vercel platform
‚Ä¢ Client-side routing and state management
‚Ä¢ Real-time markdown parsing

**Backend Layer**
‚Ä¢ Express.js API server
‚Ä¢ Deployed on Railway platform`,
    order: 2
  },
  {
    id: 3,
    title: "Technology Decisions",
    content: `# Key Technology Choices

## Strategic Framework Selection

**Next.js Benefits**
‚Ä¢ Server-side rendering capability
‚Ä¢ Built-in optimization features
‚Ä¢ Seamless Vercel integration

**Tailwind CSS Advantages**
‚Ä¢ Minimal external dependencies
‚Ä¢ Consistent design system
‚Ä¢ Reduced CSS file complexity`,
    order: 3
  },
  {
    id: 4,
    title: "Database Design",
    content: `# Data Architecture

## SQLite with Sequelize ORM

**Database Schema**
‚Ä¢ Slides table with core fields
‚Ä¢ Order-based slide sequencing
‚Ä¢ Markdown content storage
‚Ä¢ Efficient querying patterns

**ORM Benefits**
‚Ä¢ Type-safe database operations
‚Ä¢ Migration management
‚Ä¢ Model validation and relationships`,
    order: 4
  },
  {
    id: 5,
    title: "Frontend Implementation",
    content: `# Frontend Architecture

## Component-Based Design

**Core Components**
‚Ä¢ SlideViewer for presentation display
‚Ä¢ MarkdownEditor for content editing
‚Ä¢ NavigationControls for user interaction
‚Ä¢ ProgressBar for visual feedback
‚Ä¢ DragDropInterface for slide reordering

**State Management**
‚Ä¢ React hooks for local state
‚Ä¢ Context API for global state management`,
    order: 5
  },
  {
    id: 6,
    title: "Markdown Processing",
    content: `# Markdown to AST Pipeline

## Custom Parsing Implementation

**Processing Flow**
‚Ä¢ Markdown input validation
‚Ä¢ AST generation from source content
‚Ä¢ Component tree rendering
‚Ä¢ Syntax highlighting integration

**Advanced Features**
‚Ä¢ Language-specific code highlighting
‚Ä¢ Professional formatting
‚Ä¢ Custom markdown extensions support`,
    order: 6
  },
  {
    id: 7,
    title: "User Experience Features",
    content: `# Enhanced User Experience

## Navigation and Interaction

**Keyboard Navigation**
‚Ä¢ Arrow keys for slide movement
‚Ä¢ Spacebar for presentation mode
‚Ä¢ ESC key for editor toggle

**Drag and Drop Functionality**
‚Ä¢ Intuitive slide reordering
‚Ä¢ Visual feedback during operations
‚Ä¢ Persistent order changes`,
    order: 7
  },
  {
    id: 8,
    title: "CRUD Operations",
    content: `# Complete Slide Management

## Full Create, Read, Update, Delete

**Slide Creation**
‚Ä¢ Dynamic slide addition
‚Ä¢ Real-time content preview
‚Ä¢ Automatic order assignment

**Slide Editing**
‚Ä¢ In-place content modification
‚Ä¢ Live markdown rendering
‚Ä¢ Auto-save functionality
`,
    order: 8
  },
  {
    id: 9,
    title: "API Design",
    content: `# RESTful API Architecture

## Backend Service Endpoints

**Core API Routes**
‚Ä¢ GET /api/slides - Retrieve all slides
‚Ä¢ POST /api/slides - Create new slide
‚Ä¢ PUT /api/slides/:id - Update slide content
‚Ä¢ DELETE /api/slides/:id - Remove slide
‚Ä¢ PATCH /api/slides/reorder - Update slide order

**Data Validation**
‚Ä¢ Error handling middleware
‚Ä¢ Response standardization`,
    order: 9
  },
  {
    id: 10,
    title: "Design Considerations",
    content: `# Design Philosophy

## Scalability and Maintainability

**Modular Architecture**
‚Ä¢ Component separation of concerns
‚Ä¢ Reusable UI elements
‚Ä¢ Clean code organization
‚Ä¢ Extensible markdown parser

**Performance Considerations**
‚Ä¢ Efficient re-rendering strategies
‚Ä¢ Optimized database queries
‚Ä¢ Bundle size optimization`,
    order: 10
  },
  {
    id: 11,
    title: "Deployment Strategy",
    content: `# Two-Platform Deployment

## Frontend and Backend Separation

**Vercel Frontend Deployment**
‚Ä¢ Automatic builds from Git
‚Ä¢ Global CDN distribution
‚Ä¢ Serverless function support
‚Ä¢ Environment variable management

**Railway Backend Deployment**
‚Ä¢ Persistent SQLite database
‚Ä¢ Container-based deployment
‚Ä¢ Database file persistence`,
    order: 11
  },
  {
    id: 12,
    title: "Deployment Challenges",
    content: `# Technical Challenges Faced

## SQLite Database Hosting

**Initial Challenge**
‚Ä¢ Vercel serverless limitations
‚Ä¢ SQLite file persistence issues
‚Ä¢ Database state management

**Solution Implementation**
‚Ä¢ Railway platform selection
‚Ä¢ Persistent file system support
‚Ä¢ Cross-origin resource sharing configuration
‚Ä¢ Environment-specific database paths`,
    order: 12
  },
  {
    id: 13,
    title: "Testing Implementation",
    content: `# Quality Assurance Approach

## Comprehensive Testing Strategy

**Unit Testing**
‚Ä¢ Component functionality tests
‚Ä¢ Utility function validation
‚Ä¢ Markdown parser testing
‚Ä¢ API endpoint verification

**Integration Testing**
‚Ä¢ Database operation testing
‚Ä¢ Cross-browser compatibility
‚Ä¢ Mobile device responsiveness`,
    order: 13
  },
  {
    id: 14,
    title: "Component Library",
    content: `# Storybook Integration

## Design System Documentation

**Component Documentation**
‚Ä¢ Isolated component development
‚Ä¢ Visual component library
‚Ä¢ Interactive component playground

**Development Benefits**
‚Ä¢ Faster component iteration
‚Ä¢ Better collaboration workflow
‚Ä¢ Regression testing support
‚Ä¢ Style guide maintenance`,
    order: 14
  },
  {
    id: 15,
    title: "Key Takeaways",
    content: `# Project Insights

## Lessons Learned

**Technical Insights**
‚Ä¢ Next.js provides excellent developer experience
‚Ä¢ Tailwind CSS significantly reduces CSS complexity
‚Ä¢ Platform-specific deployment requires careful planning
‚Ä¢ Component testing improves code reliability

**Architecture Decisions**
‚Ä¢ Separation of frontend and backend proved beneficial
‚Ä¢ SQLite works well for development and small applications
‚Ä¢ Drag and drop enhances user experience significantly`,
    order: 15
  },
  {
    id: 16,
    title: "Project Completion",
    content: `# Delivered Solution

## Requirements Fulfilled

**Core Functionality**
‚Ä¢ Full-stack presentation platform
‚Ä¢ Markdown-powered slide content
‚Ä¢ Complete CRUD operations
‚Ä¢ Drag and drop slide reordering

**Technical Excellence**
‚Ä¢ Clean, maintainable codebase
‚Ä¢ Comprehensive testing coverage
‚Ä¢ Professional deployment strategy`,
    order: 16
  }
];

async function seedDatabase() {
  try {
    // Connect to database
    await sequelize.authenticate();
    console.log('Database connection established.');
    
    // Sync database (create tables)
    await sequelize.sync({ force: true }); // force: true will drop existing tables
    console.log('Database synchronized.');
    
    // Insert seed data
    console.log('Inserting seed data...');
    for (const slideData of slidesData) {
      await Slide.create(slideData);
      console.log(`‚úì Created slide: ${slideData.title}`);
    }
    
    console.log('\nüéâ Database seeded successfully!');
    console.log(`${slidesData.length} slides created`);
    
    // Verify data
    const count = await Slide.count();
    console.log(`Total slides in database: ${count}`);
    
  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
  } finally {
    await sequelize.close();
    console.log('Database connection closed.');
  }
}

// Run the seed function
seedDatabase();